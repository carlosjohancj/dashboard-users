/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VipRouteImport } from './routes/vip'
import { Route as MessagesRouteImport } from './routes/messages'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ContentRouteImport } from './routes/content'
import { Route as IndexRouteImport } from './routes/index'

const VipRoute = VipRouteImport.update({
  id: '/vip',
  path: '/vip',
  getParentRoute: () => rootRouteImport,
} as any)
const MessagesRoute = MessagesRouteImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ContentRoute = ContentRouteImport.update({
  id: '/content',
  path: '/content',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/content': typeof ContentRoute
  '/login': typeof LoginRoute
  '/messages': typeof MessagesRoute
  '/vip': typeof VipRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/content': typeof ContentRoute
  '/login': typeof LoginRoute
  '/messages': typeof MessagesRoute
  '/vip': typeof VipRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/content': typeof ContentRoute
  '/login': typeof LoginRoute
  '/messages': typeof MessagesRoute
  '/vip': typeof VipRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/content' | '/login' | '/messages' | '/vip'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/content' | '/login' | '/messages' | '/vip'
  id: '__root__' | '/' | '/content' | '/login' | '/messages' | '/vip'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContentRoute: typeof ContentRoute
  LoginRoute: typeof LoginRoute
  MessagesRoute: typeof MessagesRoute
  VipRoute: typeof VipRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vip': {
      id: '/vip'
      path: '/vip'
      fullPath: '/vip'
      preLoaderRoute: typeof VipRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/messages': {
      id: '/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof MessagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content': {
      id: '/content'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof ContentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContentRoute: ContentRoute,
  LoginRoute: LoginRoute,
  MessagesRoute: MessagesRoute,
  VipRoute: VipRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
